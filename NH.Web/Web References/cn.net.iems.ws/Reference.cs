//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace NH.Web.adm.net.iems.ws {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SmsInterfaceSoapBinding", Namespace="http://219.133.59.101/GeneralSMS/ws/SmsInterface")]
    public partial class SmsInterfaceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback clusterSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMoMsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSendCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SmsInterfaceService() {
            this.Url = global::NH.Web.Properties.Settings.Default.ZhuoYing_Web_cn_net_iems_ws_SmsInterfaceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getUserInfoCompletedEventHandler getUserInfoCompleted;
        
        /// <remarks/>
        public event setUserInfoCompletedEventHandler setUserInfoCompleted;
        
        /// <remarks/>
        public event clusterSendCompletedEventHandler clusterSendCompleted;
        
        /// <remarks/>
        public event getMoMsgCompletedEventHandler getMoMsgCompleted;
        
        /// <remarks/>
        public event getSendCountCompletedEventHandler getSendCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://ws.sms.surge.com", ResponseNamespace="http://219.133.59.101/GeneralSMS/ws/SmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserInfoReturn")]
        public string getUserInfo(string username, string password) {
            object[] results = this.Invoke("getUserInfo", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserInfoAsync(string username, string password) {
            this.getUserInfoAsync(username, password, null);
        }
        
        /// <remarks/>
        public void getUserInfoAsync(string username, string password, object userState) {
            if ((this.getUserInfoOperationCompleted == null)) {
                this.getUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserInfoOperationCompleted);
            }
            this.InvokeAsync("getUserInfo", new object[] {
                        username,
                        password}, this.getUserInfoOperationCompleted, userState);
        }
        
        private void OngetUserInfoOperationCompleted(object arg) {
            if ((this.getUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserInfoCompleted(this, new getUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://ws.sms.surge.com", ResponseNamespace="http://219.133.59.101/GeneralSMS/ws/SmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("setUserInfoReturn")]
        public string setUserInfo(string username, string password, string newPassword) {
            object[] results = this.Invoke("setUserInfo", new object[] {
                        username,
                        password,
                        newPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setUserInfoAsync(string username, string password, string newPassword) {
            this.setUserInfoAsync(username, password, newPassword, null);
        }
        
        /// <remarks/>
        public void setUserInfoAsync(string username, string password, string newPassword, object userState) {
            if ((this.setUserInfoOperationCompleted == null)) {
                this.setUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUserInfoOperationCompleted);
            }
            this.InvokeAsync("setUserInfo", new object[] {
                        username,
                        password,
                        newPassword}, this.setUserInfoOperationCompleted, userState);
        }
        
        private void OnsetUserInfoOperationCompleted(object arg) {
            if ((this.setUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUserInfoCompleted(this, new setUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://ws.sms.surge.com", ResponseNamespace="http://219.133.59.101/GeneralSMS/ws/SmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("clusterSendReturn")]
        public string clusterSend(string username, string password, string from, string to, string text, string presendTime, string isVoice) {
            object[] results = this.Invoke("clusterSend", new object[] {
                        username,
                        password,
                        from,
                        to,
                        text,
                        presendTime,
                        isVoice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void clusterSendAsync(string username, string password, string from, string to, string text, string presendTime, string isVoice) {
            this.clusterSendAsync(username, password, from, to, text, presendTime, isVoice, null);
        }
        
        /// <remarks/>
        public void clusterSendAsync(string username, string password, string from, string to, string text, string presendTime, string isVoice, object userState) {
            if ((this.clusterSendOperationCompleted == null)) {
                this.clusterSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclusterSendOperationCompleted);
            }
            this.InvokeAsync("clusterSend", new object[] {
                        username,
                        password,
                        from,
                        to,
                        text,
                        presendTime,
                        isVoice}, this.clusterSendOperationCompleted, userState);
        }
        
        private void OnclusterSendOperationCompleted(object arg) {
            if ((this.clusterSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clusterSendCompleted(this, new clusterSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://ws.sms.surge.com", ResponseNamespace="http://219.133.59.101/GeneralSMS/ws/SmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMoMsgReturn")]
        public string getMoMsg(string username, string password, string lastId) {
            object[] results = this.Invoke("getMoMsg", new object[] {
                        username,
                        password,
                        lastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMoMsgAsync(string username, string password, string lastId) {
            this.getMoMsgAsync(username, password, lastId, null);
        }
        
        /// <remarks/>
        public void getMoMsgAsync(string username, string password, string lastId, object userState) {
            if ((this.getMoMsgOperationCompleted == null)) {
                this.getMoMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMoMsgOperationCompleted);
            }
            this.InvokeAsync("getMoMsg", new object[] {
                        username,
                        password,
                        lastId}, this.getMoMsgOperationCompleted, userState);
        }
        
        private void OngetMoMsgOperationCompleted(object arg) {
            if ((this.getMoMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMoMsgCompleted(this, new getMoMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://ws.sms.surge.com", ResponseNamespace="http://219.133.59.101/GeneralSMS/ws/SmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSendCountReturn")]
        public string getSendCount(string username, string password, string startDate, string endDate) {
            object[] results = this.Invoke("getSendCount", new object[] {
                        username,
                        password,
                        startDate,
                        endDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSendCountAsync(string username, string password, string startDate, string endDate) {
            this.getSendCountAsync(username, password, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getSendCountAsync(string username, string password, string startDate, string endDate, object userState) {
            if ((this.getSendCountOperationCompleted == null)) {
                this.getSendCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSendCountOperationCompleted);
            }
            this.InvokeAsync("getSendCount", new object[] {
                        username,
                        password,
                        startDate,
                        endDate}, this.getSendCountOperationCompleted, userState);
        }
        
        private void OngetSendCountOperationCompleted(object arg) {
            if ((this.getSendCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSendCountCompleted(this, new getSendCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getUserInfoCompletedEventHandler(object sender, getUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void setUserInfoCompletedEventHandler(object sender, setUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void clusterSendCompletedEventHandler(object sender, clusterSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clusterSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clusterSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getMoMsgCompletedEventHandler(object sender, getMoMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMoMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMoMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getSendCountCompletedEventHandler(object sender, getSendCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSendCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSendCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591